name: Build Packer Image
on:
  push:
    branches: [ "main" ]

jobs:
  test-and-build-app:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -p3306" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn clean verify
        #        run: mvn -B package --file pom.xml -DskipTests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: user
          SPRING_DATASOURCE_PASSWORD: password

      - name: Copy application artifact
        run: |
          mkdir -p packer/artifact
          cp target/healthcheck-0.0.1-SNAPSHOT.jar packer/artifact/
          ls -al target/
          ls -al packer/artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: packer/artifact/healthcheck-0.0.1-SNAPSHOT.jar

  build-machine-image:
    needs: test-and-build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: packer/artifact

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: '${{ secrets.PACKER_SERVICE_ACCOUNT }}'
          export_default_credentials: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          packer_version: '1.10.0'

      - name: Initialize Packer
        run: packer init gcp.pkr.hcl
        working-directory: packer

      - name: List packer directory contents
        run: |
          ls -al packer/
          ls -al packer/scripts/

      - name: Packer Build
        run: |
          packer build gcp.pkr.hcl
          IMAGE_NAME=$(gcloud compute images list --sort-by="~creationTimestamp" --format="get(NAME)" --limit=1)
          echo "PACKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        working-directory: packer

      - name: Update Instance Template
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TEMPLATE_NAME="webapp-template-${TIMESTAMP}"

          gcloud compute instance-templates create $TEMPLATE_NAME \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --machine-type=e2-medium \
            --network-interface="network-tier=PREMIUM,subnet=webapp" \
            --metadata=startup-script='#!/bin/bash
              set -e
              # Create application.properties
              sudo echo "spring.datasource.url=jdbc:mysql://${{ secrets.CLOUDSQL_IP }}:3306/webapp?useSSL=false" > /opt/myapp/application.properties
              sudo echo "spring.datasource.username=${{ secrets.CLOUDSQL_USERNAME }}" >> /opt/myapp/application.properties
              sudo echo "spring.datasource.password=${{ secrets.CLOUDSQL_PASSWORD }}" >> /opt/myapp/application.properties
              sudo echo "spring.sql.init.mode=always" >> /opt/myapp/application.properties
              sudo echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> /opt/myapp/application.properties
              sudo echo "spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect" >> /opt/myapp/application.properties
              sudo echo "spring.jpa.hibernate.ddl-auto=create" >> /opt/myapp/application.properties
              sudo echo "spring.jpa.show-sql=true" >> /opt/myapp/application.properties
              # Override Hikari configuration
              sudo echo "spring.datasource.hikari.connection-timeout=2000" >> /opt/myapp/application.properties
              sudo echo "spring.datasource.hikari.maximum-pool-size=30" >> /opt/myapp/application.properties
              sudo systemctl restart webapp' \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=${{ secrets.VM_SERVICE_ACCOUNT }} \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --region=us-west1 \
            --tags="allow-https,allow-lb-to-vm" \
            --create-disk="auto-delete=yes,boot=yes,device-name=$TEMPLATE_NAME,image=${{ env.PACKER_IMAGE_NAME }},kms-key=${{ secrets.VM_KEY }},mode=rw,size=20,type=pd-standard" \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --reservation-affinity=any

          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV

      - name: Update Managed Instance Group with New Template
        env:
          MANAGED_INSTANCE_GROUP_NAME: "webapp-group-manager"
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ env.MANAGED_INSTANCE_GROUP_NAME }} \
            --template=${{ env.TEMPLATE_NAME }} \
            --zone=us-west1-b

      - name: Start Rolling Update
        env:
          MANAGED_INSTANCE_GROUP_NAME: "webapp-group-manager"
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.MANAGED_INSTANCE_GROUP_NAME }} \
            --version template=${{ env.TEMPLATE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=us-west1-b \
            --type=proactive

      - name: Wait for the Rolling Update to Complete
        env:
          MANAGED_INSTANCE_GROUP_NAME: "webapp-group-manager"
        run: |
          gcloud compute instance-groups managed wait-until ${{ env.MANAGED_INSTANCE_GROUP_NAME }} \
            --version-target-reached \
            --zone=us-west1-b
      

